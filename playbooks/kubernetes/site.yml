---
# Get AWS Credentials from user
- name: AWS Credentials
  hosts: all
  connection: local
  gather_facts: no

  vars_prompt:
    - name: aws_access_key
      prompt: "Enter your AWS access key"
      private: yes
    - name: aws_secret_key
      prompt: "Enter your AWS secret key"
      private: yes

  tasks:
    - set_fact: aws_access_key="{{ aws_access_key }}" aws_secret_key="{{ aws_secret_key }}"

# Set up AWS environment
- name: AWS Setup
  hosts: localhost
  connection: local
  gather_facts: no

  vars:
    - kubernetes_user_data2: "{{ kubernetes_user_data | to_nice_yaml }}"

  pre_tasks:
    - debug: var=kubernetes_user_data
    - debug: var="{{ kubernetes_user_data | to_nice_yaml }}"
    - debug: var=kubernetes_user_data2

  roles:
    - role: coreos
#    - role: key_pair
#
#    - role: vpc
#      resource_tags: "{{ vpc_resource_tags }}"
#
#    - role: security_group
#      security_group_description: "{{ ssh_security_group_description }}"
#      security_group_name: "{{ ssh_security_group_name }}"
#      security_group_rules_ingress: "{{ ssh_security_group_rules_ingress }}"
#      security_group_tags: "{{ ssh_security_group_tags }}"
#      task_name: SSH
#
#    - role: security_group
#      security_group_description: "{{ ping_security_group_description }}"
#      security_group_name: "{{ ping_security_group_name }}"
#      security_group_rules_ingress: "{{ ping_security_group_rules_ingress }}"
#      security_group_tags: "{{ ping_security_group_tags }}"
#      task_name: Ping
#
#    - role: security_group
#      security_group_description: "{{ kubernetes_security_group_description }}"
#      security_group_name: "{{ kubernetes_security_group_name }}"
#      security_group_rules_ingress: "{{ kubernetes_security_group_rules_ingress }}"
#      security_group_tags: "{{ kubernetes_security_group_tags }}"
#      task_name: Kubernetes
#
#    - role: security_group
#      security_group_description: "{{ zookeeper_security_group_description }}"
#      security_group_name: "{{ zookeeper_security_group_name }}"
#      security_group_rules_ingress: "{{ zookeeper_security_group_rules_ingress }}"
#      security_group_tags: "{{ zookeeper_security_group_tags }}"
#      task_name: ZooKeeper
#
#    - role: ec2
#      ansible_public_ip_groups: "{{ kubernetes_ansible_public_ip_groups }}"
#      ansible_private_ip_groups: "{{ kubernetes_ansible_private_ip_groups }}"
#      count_tag: "{{ kubernetes_count_tag }}"
#      ebs_optimized: "{{ kubernetes_ebs_optimized }}"
#      exact_count: "{{ kubernetes_exact_count }}"
#      security_groups: "{{ kubernetes_security_groups }}"
#      instance_tags: "{{ kubernetes_instance_tags }}"
#      instance_type: "{{ kubernetes_instance_type }}"
#      task_name: Kubernetes
#      user_data: "{{ kubernetes_user_data }}"
#      volumes: "{{ kubernetes_volumes }}"

# Set up Ansible controller account
- name: Ansible controller account setup
  hosts: ec2
  gather_facts: no
  sudo: yes
  remote_user: "{{ remote_user }}"

  roles:
    - role: account
      user: "{{ lookup('env', 'USER') }}"
      group: "{{ lookup('env', 'USER') }}"

  post_tasks:
    - name: Adding "{{ lookup('env', 'USER') }}" SSH key to "{{ remote_user }}" user
      authorized_key: user="{{ lookup('env', 'USER') }}" key="{{ lookup('file', '~/.ssh/id_rsa.pub') }}"

# Set up ZooKeeper
#- name: ZooKeeper setup
#  hosts: zookeeper
#  remote_user: "{{ lookup('env', 'USER') }}"
#  sudo: yes
#
#  roles:
#    - { role: zookeeper, user: zookeeper, group: zookeeper }

# Set up Kafka
#- name: Kafka setup
#  hosts: kafka
#  remote_user: "{{ lookup('env', 'USER') }}"
#  sudo: yes
#
#  roles:
#    - { role: kafka, user: kafka, group: kafka }