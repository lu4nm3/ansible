---
# Set up AWS environment
- name: AWS Setup
  connection: local
  gather_facts: no
  hosts: localhost

  vars_prompt:
    - name: aws_access_key
      prompt: "Enter your AWS access key"
      private: yes
    - name: aws_secret_key
      prompt: "Enter your AWS secret key"
      private: yes

  roles:
    - role: key_pair

    - role: vpc
      resource_tags: "{{ vpc_resource_tags }}"

    - role: security_group
      security_group_description: "{{ ssh_security_group_description }}"
      security_group_name: "{{ ssh_security_group_name }}"
      security_group_rules_ingress: "{{ ssh_security_group_rules_ingress }}"
      security_group_tags: "{{ ssh_security_group_tags }}"
      task_name: SSH

    - role: security_group
      security_group_description: "{{ ping_security_group_description }}"
      security_group_name: "{{ ping_security_group_name }}"
      security_group_rules_ingress: "{{ ping_security_group_rules_ingress }}"
      security_group_tags: "{{ ping_security_group_tags }}"
      task_name: Ping

    - role: security_group
      security_group_description: "{{ kubernetes_security_group_description }}"
      security_group_name: "{{ kubernetes_security_group_name }}"
      security_group_rules_ingress: "{{ kubernetes_security_group_rules_ingress }}"
      security_group_tags: "{{ kubernetes_security_group_tags }}"
      task_name: Kubernetes

    - role: security_group
      security_group_description: "{{ zookeeper_security_group_description }}"
      security_group_name: "{{ zookeeper_security_group_name }}"
      security_group_rules_ingress: "{{ zookeeper_security_group_rules_ingress }}"
      security_group_tags: "{{ zookeeper_security_group_tags }}"
      task_name: ZooKeeper

    - role: ec2
      ansible_public_ip_groups: "{{ masters_ansible_public_ip_groups }}"
      ansible_private_ip_groups: "{{ masters_ansible_private_ip_groups }}"
      count_tag: "{{ masters_count_tag }}"
      ebs_optimized: "{{ masters_ebs_optimized }}"
      exact_count: "{{ masters_exact_count }}"
      security_groups: "{{ masters_security_groups }}"
      instance_tags: "{{ masters_instance_tags }}"
      instance_type: "{{ masters_instance_type }}"
      task_name: Trident masters
      volumes: "{{ masters_volumes }}"
      
    - role: ec2
      ansible_public_ip_groups: "{{ workers_ansible_public_ip_groups }}"
      ansible_private_ip_groups: "{{ workers_ansible_private_ip_groups }}"
      count_tag: "{{ workers_count_tag }}"
      ebs_optimized: "{{ workers_ebs_optimized }}"
      exact_count: "{{ workers_exact_count }}"
      security_groups: "{{ workers_security_groups }}"
      instance_tags: "{{ workers_instance_tags }}"
      instance_type: "{{ workers_instance_type }}"
      task_name: Trident workers
      volumes: "{{ workers_volumes }}"

# Set up OpenSSL TLS
- name: OpenSSL TLS Setup
  connection: local
  gather_facts: no
  hosts: localhost
  sudo: yes

  pre_tasks:
    - debug: var={{ hostvars['kubernetes'] }}

  roles:
    - role: kubernetes/openssl
      kubernetes_service_ip: "{{ hostvars['kubernetes']['kubernetes_service_ip']}}"
      kubernetes_service_ip_range: "{{ hostvars['kubernetes']['kubernetes_service_ip_range']}}"

# Set up CoreOS
- name: CoreOS Master Setup
  gather_facts: no
  hosts: masters
  remote_user: "{{ remote_user }}"
  sudo: yes

  roles:
    - role: python
    - role: etcd
    - role: fleet

# Set up CoreOS
- name: CoreOS Worker Setup
  gather_facts: no
  hosts: workers
  remote_user: "{{ remote_user }}"
  sudo: yes

  roles:
    - role: python
    - role: etcd
    - role: flannel
    - role: coreos/docker



## Set up Ansible controller account
#- name: Ansible controller account setup
#  hosts: ec2
#  gather_facts: yes
#  sudo: yes
#  remote_user: "{{ remote_user }}"
#
#  roles:
#    - role: account
#      group: "{{ lookup('env', 'USER') }}"
#      user: "{{ lookup('env', 'USER') }}"
#
#  post_tasks:
#    - name: Adding "{{ lookup('env', 'USER') }}" SSH key to "{{ remote_user }}" user
#      authorized_key: user="{{ lookup('env', 'USER') }}" key="{{ lookup('file', '~/.ssh/id_rsa.pub') }}"

# Set up ZooKeeper
#- name: ZooKeeper setup
#  hosts: zookeeper
#  remote_user: "{{ lookup('env', 'USER') }}"
#  sudo: yes
#
#  roles:
#    - { role: zookeeper, user: zookeeper, group: zookeeper }

# Set up Kafka
#- name: Kafka setup
#  hosts: kafka
#  remote_user: "{{ lookup('env', 'USER') }}"
#  sudo: yes
#
#  roles:
#    - { role: kafka, user: kafka, group: kafka }
