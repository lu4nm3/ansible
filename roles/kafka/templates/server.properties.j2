# Licensed to the Apache Software Foundation (ASF) under one or more
# contributor license agreements.  See the NOTICE file distributed with
# this work for additional information regarding copyright ownership.
# The ASF licenses this file to You under the Apache License, Version 2.0
# (the "License"); you may not use this file except in compliance with
# the License.  You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# see kafka.server.KafkaConfig for additional details and defaults

############################# Server Basics #############################

# The id of the broker. This must be set to a unique integer for each broker.
broker.id={{ broker_id }}

############################# Socket Server Settings #############################

# If this is set this is the hostname that will be given out to producers, consumers,
# and other brokers to connect to.
advertised.host.name={{ inventory_hostname }}

# The port the socket server listens on
port={{ port }}

# The number of threads handling network requests
num.network.threads={{ num_network_threads }}

# The number of threads doing disk I/O
num.io.threads={{ num_io_threads }}

# The send buffer (SO_SNDBUF) used by the socket server
socket.send.buffer.bytes={{ socket_send_buffer_bytes }}

# The receive buffer (SO_RCVBUF) used by the socket server
socket.receive.buffer.bytes={{ socket_receive_buffer_bytes }}

# The maximum size of a request that the socket server will accept (protection against OOM)
socket.request.max.bytes={{ socket_request_max_bytes }}

############################# Log Basics #############################

# A comma seperated list of directories under which to store log files
log.dirs={{ log_dirs }}

# The default number of log partitions per topic. More partitions allow greater
# parallelism for consumption, but this will also result in more files across
# the brokers.
num.partitions={{ num_partitions }}

# The controller will automatically try to balance leadership for partitions among the
# brokers by periodically returning leadership to the "preferred" replica for each partition
# if it is available.
auto.leader.rebalance.enable={{ auto_leader_rebalance_enable }}

# This is largest message size Kafka will allow to be appended to this topic. Note that if you
# increase this size you must also increase your consumer's fetch size so they can fetch messages this large.
max.message.bytes={{ max_message_size_bytes }}

# The default replication factor for automatically created topics.
default.replication.factor={{ default_replication_factor }}

# The number of byes of messages to attempt to fetch for each
# partition in the fetch requests the replicas send to the leader.
replica.fetch.max.bytes={{ max_message_size_bytes }}

# Number of threads used to replicate messages from leaders. Increasing this value can increase
# the degree of I/O parallelism in the follower broker.
num.replica.fetchers={{ num_replica_fetchers }}

############################# Log Flush Policy #############################

# Messages are immediately written to the filesystem but by default we only fsync() to sync
# the OS cache lazily. The following configurations control the flush of data to disk.
# There are a few important trade-offs here:
#    1. Durability: Unflushed data may be lost if you are not using replication.
#    2. Latency: Very large flush intervals may lead to latency spikes when the flush does occur as there will be a
#       lot of data to flush.
#    3. Throughput: The flush is generally the most expensive operation, and a small flush interval may lead to
#       excessive seeks.
# The settings below allow one to configure the flush policy to flush data after a period of time or
# every N messages (or both). This can be done globally and overridden on a per-topic basis.

# We recommend using the default flush settings which disable application fsync entirely. This means relying
# on the background flush done by the OS and Kafka's own background flush. This provides the best of all worlds
# for most uses: no knobs to tune, great throughput and latency, and full recovery guarantees. We generally feel
# that the guarantees provided by replication are stronger than sync to local disk.

# The number of messages written to a log partition before we force an fsync on the log. Setting this lower 
# will sync data to disk more often but will have a major impact on performance. In general we recommend you 
# not set this and use replication for durability and allow the operating system's background flush capabilities 
# as it is more efficient. 
#log.flush.interval.messages={{ log_flush_interval_messages }}

# The maximum time between fsync calls on the log. If used in conjuction with log.flush.interval.messages the 
# log will be flushed when either criteria is met.
#log.flush.interval.ms={{ log_flush_interval_ms }}

############################# Log Retention Policy #############################

# The following configurations control the disposal of log segments. The policy can
# be set to delete segments after a period of time, or after a given size has accumulated.
# A segment will be deleted whenever *either* of these criteria are met. Deletion always happens
# from the end of the log.

# The minimum age of a log file to be eligible for deletion
log.retention.hours={{ log_retention_hours }}

# The maximum size of a log segment file. When this size is reached a new log segment will be created.
log.segment.bytes={{ log_segment_bytes }}

# The interval at which log segments are checked to see if they can be deleted according
# to the retention policies
log.retention.check.interval.ms={{ log_retention_check_interval_ms }}

############################# Zookeeper #############################

# Zookeeper connection string (see zookeeper docs for details).
# This is a comma separated host:port pairs, each corresponding to a zk
# server. e.g. "127.0.0.1:3000,127.0.0.1:3001,127.0.0.1:3002".
# You can also append an optional chroot string to the urls to specify the
# root directory for all kafka znodes.
zookeeper.connect={{ zookeeper_connect }}

# Timeout in ms for connecting to zookeeper
zookeeper.connection.timeout.ms={{ zookeeper_connection_timeout_ms }}

############################# Shutdown Policy #############################

# Enable controlled shutdown of the broker. If enabled, the broker will move all leaders
# on it to some other brokers before shutting itself down. This reduces the unavailability
# window during shutdown.
controlled.shutdown.enable={{ controlled_shutdown_enable }}

# Number of retries to complete the controlled shutdown successfully before executing an unclean shutdown.
controlled.shutdown.max.retries={{ controlled_shutdown_max_retries }}

# Backoff time between shutdown retries.
controlled.shutdown.retry.backoff.ms={{ controlled_shutdown_retry_backoff_ms }}
